// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                Int       @id @default(autoincrement())
  userId            Int
  type              String
  provider          String
  providerAccountId Int
  refresh_token     String?
  access_token      String?
  expires_at        DateTime?
  token_type        String?
  scope             String?
  id_token          Int?
  session_state     String?
  user              User      @relation(fields: [id], references: [id])
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [id], references: [id])
}

enum UserRole {
  USER
  ADMIN
  DOCTOR
}

model User {
  id            Int       @id @default(autoincrement())
  firstName     String
  lastName      String
  email         String    @unique
  phone         String?
  emailVerified DateTime?
  image         String?
  role          UserRole  @default(USER)
  password      String
  accounts      Account[]
  sessions      Session[]
  isVerfied     Boolean   @default(false)
  token         Int
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

// model Category {
//   id          Int    @id @default(auto()) @map("_id") @db.ObjectId
//   title       String
//   slug        String    @unique
//   imageUrl    String?
//   demoLink    String?
//   description String?
//   products    Product[]

//   createdAt DateTime  @default(now())
//   updatedAt DateTime? @updatedAt
// }

// model Product {
//   id            String   @id @default(auto()) @map("_id") @db.ObjectId
//   title         String
//   slug          String   @unique
//   price         Float?
//   qty           Int?
//   imageUrl      String?
//   productImages String[]
//   features      String[]
//   description   String?
//   categoryId    String   @db.ObjectId
//   category      Category @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)

//   createdAt DateTime  @default(now())
//   updatedAt DateTime? @updatedAt
// }
